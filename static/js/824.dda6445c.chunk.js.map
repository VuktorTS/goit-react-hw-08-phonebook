{"version":3,"file":"static/js/824.dda6445c.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.styled.js","components/Section/Section.styled.js","components/Section/Section.jsx","redux/contacts/selectors.js","components/ContactsForm/ContactsForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactsList/ContactsList.styled.js","components/ContactUpdate/ContactUpdate.styled.js","components/ContactUpdate/ContactUpdate.jsx","components/ContactsList/ContactsList.jsx","components/Notification/Notification.styled.js","components/Notification/Notification.jsx","page/ContactsPage.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  font-size: 16px;\n  font-weight: 500;\n  padding: 7px;\n  border: 3px solid #1035ac;\n  border-radius: 5px;\n`;\nexport const Label = styled.label`\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  font-weight: 600;\n  font-size: 21px;\n  color: #1035ac;\n  gap: 5px;\n\n  & p {\n    color: red;\n  }\n`;\nexport const FormButton = styled.button`\n  text-transform: uppercase;\n  font-size: 15px;\n  padding: 15px;\n  border-radius: 5px;\n  cursor: pointer;\n  background-color: #1035ac;\n  color: white;\n  font-weight: 600;\n  box-shadow: rgba(0, 50, 255, 0.5) 0px 1px 8px;\n\n  &:is(:focus, :hover) {\n    background-color: #067038;\n  }\n`;\n","import styled from 'styled-components';\nexport const SectionWrapper = styled.section`\n  width: 450px;\n  margin: auto;\n  display: flex;\n  flex-direction: column;\n  padding: 15px;\n  border-radius: 7px;\n  box-shadow: inset #1035ac 0 0 7px;\n  background-image: linear-gradient(55deg, #00bfff, #00ffff);\n  background-color: #87cefa;\n  gap: 16px;\n\n  & h2 {\n    color: #1035ac;\n    text-align: center;\n  }\n  &:first-child {\n    margin: 25px auto;\n  }\n`;\n","import { SectionWrapper } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionWrapper>\n      <h2>{title}</h2>\n      {children}\n    </SectionWrapper>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectContactsIsLoading = state => state.contacts.isLoading;\nexport const selectContactsError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\nexport const selectUpdateContact = state => state.item;\nexport const selectIsOpenModal = state => state.isOpenModal;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name?.toLowerCase().includes(filter.toLowerCase().trim())\n    );\n  }\n);\n","import { useDispatch, useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nimport { addContact } from 'redux/contacts/contactsSlice';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nimport { FormButton, FormContainer, Input, Label } from './ContactsForm.styled';\nexport const FormContacts = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const submitForm = event => {\n    event.preventDefault();\n    const form = event.target;\n    const { name, number } = form.elements;\n    const contact = {\n      name: name.value,\n      number: number.value,\n    };\n\n    if (isDuplicate(contact)) return;\n    toast.success(`${name.value} add to contacts.`);\n    dispatch(addContact(contact));\n    form.reset();\n  };\n\n  const isDuplicate = values => {\n    const duplicateContactName = contacts.find(\n      ({ name }) => name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (duplicateContactName) {\n      toast.error(`${duplicateContactName.name} is already in contacts`);\n      return true;\n    }\n  };\n\n  return (\n    <FormContainer onSubmit={submitForm}>\n      <Label>\n        Name\n        <Input type=\"text\" name=\"name\" placeholder=\"John\" />\n      </Label>\n      <Label>\n        Number\n        <Input type=\"tel\" name=\"number\" placeholder=\"123-45-67\" />\n      </Label>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </FormContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Input = styled.input`\n  font-size: 16px;\n  font-weight: 500;\n  padding: 7px;\n  border: 3px solid #1035ac;\n  border-radius: 5px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  font-size: 18px;\n  font-weight: 500;\n  align-items: center;\n  flex-direction: column;\n  gap: 5px;\n`;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nimport { Input, Label } from './Filter.styled';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  return (\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" onChange={e => dispatch(setFilter(e.target.value))} />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Table = styled.table`\n  display: flex;\n  flex-direction: column;\n`;\nexport const TabletHead = styled.thead`\n  margin-bottom: 16px;\n  & tr {\n    display: flex;\n    padding: 3px;\n    gap: 15px;\n\n    & th:nth-child(2) {\n      width: 200px;\n      word-wrap: break-word;\n    }\n    & th:nth-child(3) {\n      width: 150px;\n      word-wrap: break-word;\n    }\n    & th:nth-child(4) {\n      width: 70px;\n      word-wrap: break-word;\n    }\n    & th:not(:last-child) {\n      border-bottom: 3px solid #1035ac;\n    }\n    & th:nth-child(1) {\n      width: 24px;\n      border-bottom: none;\n    }\n  }\n`;\n\nexport const TableBody = styled.tbody`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  text-align: center;\n`;\n\nexport const ItemRow = styled.tr`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 3px;\n  gap: 15px;\n\n  & td {\n    padding-bottom: 5px;\n  }\n\n  & td:nth-child(2) {\n    width: 200px;\n    word-wrap: break-word;\n  }\n  & td:nth-child(3) {\n    width: 150px;\n    word-wrap: break-word;\n  }\n  & td:nth-child(4) {\n    & button {\n      text-transform: uppercase;\n      font-size: 15px;\n      padding: 3px;\n      border-radius: 5px;\n      cursor: pointer;\n      background-color: #ed2939;\n      color: white;\n      font-weight: 600;\n      &:is(:focus, :hover) {\n        color: white;\n        background-color: #b11226;\n      }\n    }\n  }\n  & td:not(:last-child) {\n    border-bottom: 3px dashed #1035ac;\n  }\n  & td:nth-child(1) {\n    width: 24px;\n    border-bottom: none;\n    padding-bottom: 0;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Caption = styled.h2`\n  text-align: center;\n  margin-bottom: 25px;\n  color: #1035ac;\n`;\n","import { toast } from 'react-toastify';\n\nimport Modal from '@mui/material/Modal';\nimport Box from '@mui/material/Box';\n\nimport {\n  FormButton,\n  FormContainer,\n  Input,\n  Label,\n} from '../ContactsForm/ContactsForm.styled';\nimport { updateContact } from 'redux/contacts/contactsSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectIsOpenModal,\n  selectUpdateContact,\n} from 'redux/contacts/selectors';\n\nimport { setIsOpenModal } from 'redux/contacts/isOpenModalSlilce';\nimport { setItem } from 'redux/contacts/itemSlice';\nimport { Caption } from './ContactUpdate.styled';\n\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: ' lightblue ',\n  border: '0px solid #000',\n  borderRadius: '10px',\n  boxShadow: 24,\n  p: 4,\n};\n\nconst ContactUpdate = () => {\n  const dispatch = useDispatch();\n\n  const contactThatIsUpdated = useSelector(selectUpdateContact);\n\n  const open = useSelector(selectIsOpenModal);\n  const handleClose = () => dispatch(setIsOpenModal(false));\n\n  const submitForm = event => {\n    event.preventDefault();\n\n    const form = event.target;\n    const { name, number } = form.elements;\n    const contact = { name: name.value, number: number.value };\n    if (name.value === '') {\n      contact.name = contactThatIsUpdated.name;\n    }\n    if (number.value === '') {\n      contact.number = contactThatIsUpdated.number;\n    }\n    const { id } = contactThatIsUpdated;\n    dispatch(setItem(contact));\n    toast(\n      `✅Contact «${contactThatIsUpdated.name}» successfully changed to «${contact.name}»`,\n      {\n        autoClose: 3000,\n      }\n    );\n\n    dispatch(updateContact({ id, contact }));\n    handleClose();\n    form.reset();\n  };\n  return (\n    <>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"modal-modal-title\"\n        aria-describedby=\"modal-modal-description\"\n      >\n        <Box sx={style}>\n          <Caption>Update contact</Caption>\n          <FormContainer onSubmit={submitForm}>\n            <Label>\n              {contactThatIsUpdated.name}\n              <Input type=\"text\" name=\"name\" placeholder=\"John\" />\n            </Label>\n            <Label>\n              {contactThatIsUpdated.number}\n              <Input type=\"tel\" name=\"number\" placeholder=\"123-45-67\" />\n            </Label>\n            <FormButton type=\"submit\">Update contact</FormButton>\n          </FormContainer>\n        </Box>\n      </Modal>\n    </>\n  );\n};\n\nexport default ContactUpdate;\n","import { toast } from 'react-toastify';\nimport { AiOutlineEdit } from 'react-icons/ai';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectVisibleContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/contactsSlice';\n\nimport { ItemRow, Table, TableBody, TabletHead } from './ContactsList.styled';\nimport ContactUpdate from 'components/ContactUpdate/ContactUpdate';\nimport { setItem } from 'redux/contacts/itemSlice';\nimport { setIsOpenModal } from 'redux/contacts/isOpenModalSlilce';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectVisibleContacts);\n\n  const handleOpen = contact => {\n    dispatch(setItem(contact));\n    dispatch(setIsOpenModal(true));\n  };\n\n  return (\n    <>\n      <Table>\n        <TabletHead>\n          <tr>\n            <th></th>\n            <th>Name</th>\n            <th>Phone</th>\n            <th></th>\n          </tr>\n        </TabletHead>\n        <TableBody>\n          {contacts.map(({ id, name, number }) => {\n            return (\n              <ItemRow key={id}>\n                <td onClick={() => handleOpen({ id, name, number })}>\n                  <AiOutlineEdit size=\"24\" color=\"black\" />\n                </td>\n                <td>{name}</td>\n                <td>{number}</td>\n\n                <td>\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      toast(`❌ Contact «${name}» successfully deleted`, {\n                        autoClose: 3000,\n                      });\n                      return dispatch(deleteContact(id));\n                    }}\n                  >\n                    Delete\n                  </button>\n                </td>\n              </ItemRow>\n            );\n          })}\n        </TableBody>\n      </Table>\n      <ContactUpdate />\n    </>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Text = styled.p`\n  font-size: 18px;\n  font-weight: 600;\n  text-align: center;\n`;\n","import { Text } from './Notification.styled';\n\nexport const Notification = ({ message }) => {\n  return <Text>{message}</Text>;\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport { Oval } from 'react-loader-spinner';\n\nimport { FormContacts } from 'components/ContactsForm/ContactsForm';\nimport { Section } from 'components/Section/Section';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { Notification } from 'components/Notification/Notification';\n\nimport {\n  selectContacts,\n  selectContactsIsLoading,\n} from 'redux/contacts/selectors';\n\nimport { fetchAll } from 'redux/contacts/contactsSlice';\n\nconst ContactsPage = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectContactsIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchAll());\n  }, [dispatch]);\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <FormContacts />\n      </Section>\n      <Section title=\"Contacts\">\n        {contacts?.length ? (\n          <>\n            <Filter />\n            <ContactsList />\n          </>\n        ) : (\n          <Notification message=\"There is no contacts!\" />\n        )}\n        {isLoading && (\n          <Oval\n            height=\"50\"\n            width=\"50\"\n            color=\"violet\"\n            secondaryColor=\"blue\"\n            strokeWidth={3}\n            strokeWidthSecondary={3}\n          />\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["FormContainer","styled","_templateObject","_taggedTemplateLiteral","Input","_templateObject2","Label","_templateObject3","FormButton","_templateObject4","SectionWrapper","Section","_ref","title","children","_jsxs","_jsx","selectContacts","state","contacts","items","selectContactsIsLoading","isLoading","selectUpdateContact","item","selectIsOpenModal","isOpenModal","selectVisibleContacts","createSelector","filter","contact","_contact$name","name","toLowerCase","includes","trim","FormContacts","useSelector","dispatch","useDispatch","isDuplicate","values","duplicateContactName","find","toast","concat","onSubmit","event","preventDefault","form","target","_form$elements","elements","number","value","addContact","reset","type","placeholder","Filter","onChange","e","setFilter","Table","TabletHead","TableBody","ItemRow","Caption","style","position","top","left","transform","width","bgcolor","border","borderRadius","boxShadow","p","contactThatIsUpdated","open","handleClose","setIsOpenModal","_Fragment","Modal","onClose","Box","sx","id","setItem","autoClose","updateContact","ContactsList","map","onClick","AiOutlineEdit","size","color","deleteContact","ContactUpdate","Text","Notification","message","useEffect","fetchAll","length","Oval","height","secondaryColor","strokeWidth","strokeWidthSecondary"],"sourceRoot":""}